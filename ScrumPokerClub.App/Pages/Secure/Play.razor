@page "/s/{Session}"

@implements IDisposable
@inject ISessionManagementService sessionManagementService
@inject IUserInfoService userInfoService

@using ScrumPokerClub.Services.Responses
@using ScrumPokerClub.Services.Requests
@using ScrumPokerClub.Data 

<CascadingValue Value="Session">
    <div class="row" id="playareamain">
        <NamePlateList @ref="namePlateList" />
        <div class="justify-content-center col-sm-9">
            <TabControl ShowTabs="false" @ref="tabControl">
                <TabPage Title="Voting" @ref="playTab">
                    <PokerDeck />
                    <ModeratorToolbox EnableVotingTools="@ModeratorToolBoxMasterEnable" />
                </TabPage>
                <TabPage Title="Results" @ref="resultsTab">
                    <ResultsView @ref="resultsView"/>
                    <ModeratorToolbox EnableResultsTools="@ModeratorToolBoxMasterEnable" />
                </TabPage>
            </TabControl>
        </div>
    </div>
</CascadingValue>

@code
{
    [Parameter]
    public string Session { get; set; }

    NamePlateList namePlateList;
    TabControl tabControl;
    TabPage playTab;
    TabPage resultsTab;
    ResultsView resultsView;

    bool ModeratorToolBoxMasterEnable = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await sessionManagementService.EnsureSessionConfiguredAsync(new ConfigureSessionRequest()
        {
            Session = Session,
            Configure = session =>
            {
                session.TransitionToResults += OnTransitionToResults;
                session.TransitionToPlay += OnTransitionToPlay;
                session.PlayerConnected += OnPlayerConnected;
                session.PlayerDisconnected += OnPlayerDisconnected;
                session.VoteUpdated += OnVoteUpdated;
                session.PlayerUpdated += OnPlayerUpdated;
            }
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await sessionManagementService.JoinSessionAsync(new JoinSessionRequest()
        {
            Session = Session
        });

        var sessionStateResponse = await sessionManagementService.GetSessionStateAsync(new SessionStateRequest()
        {
            Session = Session
        });

        ReconcilePlayers(sessionStateResponse);
        switch (sessionStateResponse.GamePhase)
        {
            case GamePhase.Voting:
                ReconcileVotingPhase(sessionStateResponse);
                break;

            case GamePhase.Results:
                ReconcileResultsPhase(sessionStateResponse);
                break;

            default:
                break;
        }
    }

    async void OnTransitionToResults(object sender, TransitionToResultsResponse transitionToResultsResponse)
    {
        await Task.CompletedTask;
        tabControl.ActivatePage(resultsTab);

        await namePlateList.OnTransitionToResults(sender, transitionToResultsResponse);
        await resultsView.OnTransitionToResults(sender, transitionToResultsResponse);
    }

    async void OnTransitionToPlay(object sender, TransitionToPlayResponse transitionToPlayResponse)
    {
        await namePlateList.OnTransitionToPlay(sender, transitionToPlayResponse);

        tabControl.ActivatePage(playTab);
    }

    async void OnPlayerConnected(object sender, PlayerConnectedResponse playerConnectedResponse)
    {
        await namePlateList.OnPlayerConnected(sender, playerConnectedResponse);
    }

    async void OnPlayerDisconnected(object sender, PlayerDisconnectedResponse playerDisconnectedResponse)
    {
        await namePlateList.OnPlayerDisconnected(sender, playerDisconnectedResponse);
    }

    async void OnVoteUpdated(object sender, VoteUpdatedResponse voteUpdatedResponse)
    {
        await namePlateList.OnVoteUpdated(sender, voteUpdatedResponse);
    }

    async void OnPlayerUpdated(object sender, PlayerUpdatedResponse playerUpdatedResponse)
    {
        await namePlateList.OnPlayerUpdated(sender, playerUpdatedResponse);

        if (userInfoService.Identifier == playerUpdatedResponse.Id)
            ModeratorToolBoxMasterEnable = playerUpdatedResponse.IsModerator;

        await InvokeAsync(() => StateHasChanged());
    }

    void IDisposable.Dispose()
    {
        sessionManagementService.EnsureSessionConfiguredAsync(new ConfigureSessionRequest()
        {
            Session = Session,
            Configure = session =>
            {
                session.TransitionToResults -= OnTransitionToResults;
                session.TransitionToPlay -= OnTransitionToPlay;
                session.PlayerConnected -= OnPlayerConnected;
                session.PlayerDisconnected -= OnPlayerDisconnected;
                session.VoteUpdated -= OnVoteUpdated;
                session.PlayerUpdated -= OnPlayerUpdated;
            }
        });

        sessionManagementService.LeaveSessionAsync(new LeaveSessionRequest()
        {
            Session = Session,
            Id = userInfoService.Identifier
        });
    }

    void ReconcilePlayers(SessionStateResponse sessionStateResponse)
    {
        foreach (var player in sessionStateResponse.Players)
        {
            // todo handle a connected player is a moderator (moderatorship isn't handled currently)
            OnPlayerConnected(this, new PlayerConnectedResponse()
            {
                Id = player.PlayerId,
                Name = player.Name,
                AvatarId = player.AvatarId
            });
        }
    }

    void ReconcileVotingPhase(SessionStateResponse sessionStateResponse)
    {
        foreach (var player in sessionStateResponse.Players)
        {
            if (player.Vote is not null)
                OnVoteUpdated(this, new VoteUpdatedResponse() { Id = player.PlayerId });
        }
    }

    void ReconcileResultsPhase(SessionStateResponse sessionStateResponse)
    {
        OnTransitionToResults(this, TransitionToResultsResponse.FromPlayerStates(sessionStateResponse.Players));
    }
}
