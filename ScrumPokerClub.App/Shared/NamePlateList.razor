@inject ISessionManagementService sessionManagementService
@using ScrumPokerClub.Services.Responses
@using ScrumPokerClub.Services.Requests 

<div class="justify-content-sm-left col-sm-3" id="playerlist">
    @foreach (var namePlate in namePlatesDto)
    {
        <NamePlate Id="@namePlate.Id"
                   Name="@namePlate.Name"
                   AvatarId="@namePlate.AvatarId"
                   HasVoted="@namePlate.HasVoted" />
    }
</div>

@code {
    [CascadingParameter]
    public string Session { get; set; }

    private class NamePlateDto
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public int AvatarId { get; set; }
        public bool HasVoted { get; set; } = false;
    }

    private IList<NamePlateDto> namePlatesDto;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        namePlatesDto = new List<NamePlateDto>();
    }

    // called when a player connects
    internal async Task OnPlayerConnected(object sender, PlayerConnectedResponse playerConnectedResponse)
    {
        // bail early if there's already a nameplate for the connected player
        if (namePlatesDto.Any(npdto => npdto.Id == playerConnectedResponse.Id))
            return;

        var newNamePlateDto = new NamePlateDto()
        {
            Id = playerConnectedResponse.Id,
            Name = playerConnectedResponse.Name,
            AvatarId = playerConnectedResponse.AvatarId
        };

        namePlatesDto.Add(newNamePlateDto);

        await InvokeAsync(() => StateHasChanged());
    }

    // called when a player disconnects
    internal async Task OnPlayerDisconnected(object sender, PlayerDisconnectedResponse playerDisconnectedResponse)
    {
        var namePlateDto = namePlatesDto.FirstOrDefault(npdto => npdto.Id == playerDisconnectedResponse.Id);
        if (namePlateDto is null)
            return;

        namePlatesDto.Remove(namePlateDto);

        await InvokeAsync(() => StateHasChanged());
    }

    /// called when a vote is updated.
    internal async Task OnVoteUpdated(object sender, VoteUpdatedResponse voteUpdatedResponse)
    {
        var namePlateDto = namePlatesDto.FirstOrDefault(npdto => npdto.Id == voteUpdatedResponse.Id);
        if (namePlateDto is null)
            return;

        namePlateDto.HasVoted = true;

        await InvokeAsync(() => StateHasChanged());
    }

    internal async Task OnTransitionToPlay(object _, TransitionToPlayResponse transitionToPlayResponse)
    {
        foreach (var namePlateDto in namePlatesDto)
            namePlateDto.HasVoted = false;

        await InvokeAsync(() => StateHasChanged());
    }

    internal async Task OnTransitionToResults(object _, TransitionToResultsResponse __)
    {
        await Task.CompletedTask;
        // todo render votes
    }
}
