<div class="btn-group" role="group" style="visibility: @tabVisibility">
    @foreach (var tabPage in tabPages)
    {
        <button type="button"
                class="btn @GetButtonClass(tabPage)"
                @onclick=@( () => ActivatePage(tabPage) )>
            @tabPage.Title
        </button>
    }
</div>
<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool ShowTabs
    {
        set
        {
            tabVisibility = value ? "visible" : "hidden";

            InvokeAsync(() => StateHasChanged());
        }
    }

    public TabPage Current { get; set; }

    IList<TabPage> tabPages;

    string tabVisibility;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        tabPages = new List<TabPage>();
    }

    internal void AddTabPage(TabPage tabPage)
    {
        tabPages.Add(tabPage);

        if (tabPages.Count == 1)
            Current = tabPage;

        InvokeAsync(() => StateHasChanged());
    }

    string GetButtonClass(TabPage tabPage)
    {
        return tabPage == Current ? "btn-primary" : "btn-secondary";
    }

    public void ActivatePage(TabPage tabPage)
    {
        if (!tabPages.Contains(tabPage))
            return;

        Current = tabPage;

        InvokeAsync(() => StateHasChanged());
    }
}
