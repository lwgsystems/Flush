@inject ISessionManagementService sessionManagementService
@using ScrumPokerClub.Services.Requests
@using ScrumPokerClub.Data

<div class="row justify-content-md-center btn-group-xl mb-4" role="group">
    @for (var i = 0; i < Values.Length; ++i)
    {
        <PokerCard OnClickCallback="@OnPokerCardClicked" Value="@Values.GetValue(i)" />
    }
</div>

@code {
    [CascadingParameter]
    public string Session { get; set; }

    public Array Values { get; set; }

    PokerCard Current { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Values = Enum.GetValues(typeof(ModifiedFibonacciVote));
    }

    internal void OnPokerCardClicked(PokerCard card)
    {
        Current?.SetIsTop(false);

        card.SetIsTop(true);

        Current = card;

        var vote = (int)Enum.Parse(typeof(ModifiedFibonacciVote), ((Enum)card.Value).ToString());
        sessionManagementService.UpdateVoteAsync(new UpdateVoteRequest()
        {
            Session = Session,
            Vote = $"{vote}"
        });

        InvokeAsync(() => StateHasChanged());
    }

    internal void SetTopCard(PokerCard card)
    {
        Current = card;
    }
}
